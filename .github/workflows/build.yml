# 2023-05-01 19:50
name: Build - latest

on:
  workflow_dispatch:
#  push:
#    branches: [ '*' ]
#    tags:
#      - v*
#  pull_request:
#   branches: [ master ]

env:
  prog_name: ffmpeg-static
  TAG_NAME: release

jobs:
  build-docker:
    runs-on: ${{ matrix.job.os }}
    container: docker://hhmhh/ffmpeg_build:latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: Linux,   os: ubuntu-latest, target: x86_64-unknown-linux-gnu }
          - { name: Windows, os: ubuntu-latest, target: x86_64-w64-mingw32       }

    steps:
    - name: Checkout
      uses: actions/checkout@v3

#    - name: Set up MinGW for Windows on Linux
#      if: matrix.job.target == 'x86_64-w64-mingw32'
    - name: Install deps
      shell: bash
      run: |
        sudo apt update;
        sudo apt install yasm make automake autoconf git pkg-config libtool nasm mercurial cmake -y;
        if [ "${{ matrix.job.target }}" = "x86_64-w64-mingw32" ]; then
          sudo apt install gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 -y;
          #sudo apt install gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 yasm make automake autoconf git pkg-config libtool nasm mercurial cmake -y
        fi;

    - name: Download ffmpeg git
      run: |
        ./download.sh
      shell: bash

    - name: Build ffmpeg
      shell: bash
      run: |
        ./build.sh ${{ matrix.job.target }}

    - name: Debug
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: debug
        path: .

    - name: Package release
      shell: bash
      run: |
        package_file=${{ env.prog_name }}-${{ matrix.job.name }}-${{ matrix.job.target}}.zip
        cd dist && zip -r $package_file .
        echo "package_file=$package_file" >> $GITHUB_ENV

    - name: List package_file
      shell: bash
      run: |
        echo "== env.package_file == "
        echo ${{ env.package_file }}

    - name: Publish release
      uses: softprops/action-gh-release@v1
      # if: startsWith(github.ref, 'refs/tags/')
      with:
          tag_name: ${{ env.TAG_NAME }}
          draft: true
          files: |
            dist/${{ env.package_file }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: MacOS,   os: macOS-latest, target: x86_64-apple-darwin }
        include:
          - os: macOS-latest
            name: MacOS
            target: x86_64-apple-darwin
            install-deps: |
              brew install nasm
#          - os: [macOS-latest, windows-latest]
#            - os: windows-latest
#              install-deps: |
#                 curl -LO https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/win64/nasm-2.15.05-win64.zip
#                 7z x nasm-2.15.05-win64.zip
#                 cp nasm-2.15.05/nasm.exe /usr/bin/nasm.exe
#                 rm /usr/bin/link.exe
#              package-cmd: 7z a Windows.zip dist
#              package-file: Windows.zip

    steps:
    - uses: actions/checkout@v2

    - name: Install deps
      shell: bash
      run: |
        echo "== brew install deps v1 begin =="
        brew install nasm
        echo "== brew install deps v1 end =="

        echo "== brew install deps v2 begin =="
        echo "== ${{ matrix.job.install-deps }} =="
        ${{ matrix.job.install-deps }}
        echo "== brew install deps v2 end =="

    - name: Download ffmpeg git
      shell: bash
      run: |
        ./download.sh

    - name: Microsoft Visual C for Windows build
      if: matrix.job.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Build ffmpeg
      shell: bash
      run: |
        ./build.sh

    - name: Debug
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: debug
        path: .

    - name: Package release
      run: |
        package_file=${{ env.prog_name }}-${{ matrix.job.name }}-${{ matrix.job.target}}.zip
        cd dist && zip -r $package_file .
        echo "package_file=$package_file" >> $GITHUB_ENV

    - name: List package_file
      shell: bash
      run: |
        echo "== env.package_file == "
        echo ${{ env.package_file }}

    - name: Publish release
      uses: deep-soft/action-gh-release@v1
      # if: startsWith(github.ref, 'refs/tags/')
      with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            dist/${{ env.package_file }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
